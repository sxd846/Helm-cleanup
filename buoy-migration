#!/bin/bash

set -e

NAMESPACE=$1
ENVIRONMENT=$2
BACKUP_DIR="./buoy-migration-backup-${NAMESPACE}"

if [ -z "$NAMESPACE" ] || [ -z "$ENVIRONMENT" ]; then
    echo "Usage: ./buoy-migrate.sh <namespace> <environment>"
    echo "Example: ./buoy-migrate.sh my-app-ns development"
    exit 1
fi

# Function to check prerequisites
check_prerequisites() {
    echo "üîç Checking prerequisites..."
    
    if ! command -v kubectl &> /dev/null; then
        echo "‚ùå kubectl is not installed"
        exit 1
    fi
    
    if ! kubectl get namespace "$NAMESPACE" &> /dev/null; then
        echo "‚ùå Namespace $NAMESPACE does not exist"
        exit 1
    fi
}

# Function to backup all resources and secrets
backup_resources() {
    echo "üì¶ Creating backup of all resources..."
    mkdir -p "$BACKUP_DIR"
    
    # Backup resources with common Buoy labels
    echo "Backing up resources with app label..."
    kubectl get all -n "$NAMESPACE" -l "app=old-helm-chart-here" -o yaml > "$BACKUP_DIR/resources-app-label-$(date +%Y%m%d-%H%M%S).yaml"
    
    # Backup any existing secrets (if needed later)
    echo "Backing up secrets..."
    kubectl get secrets -n "$NAMESPACE" -o yaml > "$BACKUP_DIR/secrets-$(date +%Y%m%d-%H%M%S).yaml"
    
    # Backup configmaps
    echo "Backing up configmaps..."
    kubectl get configmaps -n "$NAMESPACE" -o yaml > "$BACKUP_DIR/configmaps-$(date +%Y%m%d-%H%M%S).yaml"
    
    echo "‚úÖ Backup completed in $BACKUP_DIR"
}

# Function to identify and list all resources to be removed
identify_resources() {
    echo "üîç Identifying resources to be removed..."
    
    # Check for resources with the app label
    APP_RESOURCES=$(kubectl get all -n "$NAMESPACE" -l "app=old-helm-chart-here" 2>/dev/null)
    if [ $? -eq 0 ] && [ ! -z "$APP_RESOURCES" ]; then
        echo "Found resources with app=old-helm-chart-here:"
        echo "$APP_RESOURCES"
    fi
    
    # Additional checks for Buoy-specific resources
    # Add any other labels or annotations that might be specific to Buoy
    
    echo "Review the resources above. These will be deleted."
    read -p "Continue? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Operation cancelled"
        exit 1
    fi
}

# Function to remove old resources
remove_old_resources() {
    echo "üóëÔ∏è Removing old resources..."
    
    # Remove resources with app label
    kubectl delete all -n "$NAMESPACE" -l "app=old-helm-chart-here" --grace-period=30 || true
    
    # Remove any other Buoy-specific resources
    # Add additional cleanup commands here based on other identifiers
    
    echo "‚úÖ Old resources removed"
}

# Function to deploy new chart using GitHub Actions workflow
deploy_new_chart() {
    echo "üöÄ Triggering new chart deployment..."
    
    if ! command -v gh &> /dev/null; then
        echo "‚ùå GitHub CLI (gh) is not installed. Please run the workflow manually:"
        echo "1. Go to GitHub Actions"
        echo "2. Run 'App - Deploy (New)' workflow"
        echo "3. Use version: v0.1.11"
        echo "4. Select environment: $ENVIRONMENT"
    else
        gh workflow run "App - Deploy (New)" -f environment="$ENVIRONMENT" -f version="v0.1.11"
    fi
}

# Function to verify new deployment
verify_deployment() {
    echo "üîç Verifying new deployment..."
    
    echo "Waiting for pods to be ready..."
    kubectl wait --for=condition=ready pod -l "app=psg-ops-nginx" -n "$NAMESPACE" --timeout=300s || {
        echo "‚ùå Timeout waiting for pods to be ready"
        exit 1
    }
    
    echo "‚úÖ New deployment verified"
}

# Main execution
echo "üèÅ Starting migration for namespace: $NAMESPACE"

# Execute steps
check_prerequisites

echo "‚ö†Ô∏è  Important Notes:"
echo "1. This script will remove resources deployed by Buoy"
echo "2. A backup will be created in $BACKUP_DIR"
echo "3. Make sure you have necessary permissions"
echo "4. Consider taking a cluster backup if available"

read -p "Are you sure you want to proceed? (y/N) " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Migration cancelled"
    exit 1
fi

backup_resources
identify_resources
remove_old_resources
deploy_new_chart
verify_deployment

echo "üéâ Migration completed successfully!"
echo "Notes:"
echo "1. Check the new deployment in namespace: $NAMESPACE"
echo "2. Backups are stored in: $BACKUP_DIR"
echo "3. If you need to restore, use: kubectl apply -f $BACKUP_DIR/resources-app-label-*.yaml"
